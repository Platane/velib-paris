import {delaunay, computeCircle}  from '../../../front/math/delaunay'
import {squareDistance}  from '../../../front/math/primitive/point'
import {assert}  from '../../assert'

const consistency = (triangles, points) =>


    // for all triangle, there is no point inside the circonscrit circle
    !triangles.some( triangle => {

        const c = computeCircle( triangle.map( i => points[i] ) )

        return points
            .filter( (_, i) => !triangle.some( j => i == j ) )
            .filter( p => squareDistance( p, c ) <= c.r )
            .length
    })


    &&

    // each point is in at least one triangle
    points.every( (_, i) =>
        triangles.some( triangle => triangle.some( j => i == j ) )
    )



let samples = [
    [
        {x:0, y:10},
        {x:0, y:0},
        {x:10, y:20},
    ],
    [
        {x:0, y:10},
        {x:0, y:20},
        {x:0, y:30},
    ],
    [
        {x:0, y:10},
        {x:0, y:20},
        {x:0, y:30},
        {x:0, y:40},
        {x:0, y:55},
        {x:10, y:55},
    ],
    [
        {x:80, y:20},
        {x:0, y:10},
        {x:40, y:20},
        {x:0, y:30},
        {x:20, y:5},
        {x:0, y:20},
        {x:40, y:30},
        {x:40, y:10},
    ],
    [
        {x:170.42721, y:170.42721 },{x:550.83458, y:550.83458 },{x:210.41682, y:210.41682 },{x:226.02468, y:226.02468 },{x:319.87534, y:319.87534 },{x:400.07436, y:400.07436 },{x:313.28082, y:313.28082 },{x:592.02553, y:592.02553 },{x:440.30833, y:440.30833 },{x:384.60614, y:384.60614 },{x:447.12789, y:447.12789 },{x:311.59793, y:311.59793 },{x:620.48742, y:620.48742 },{x:551.64086, y:551.64086 },{x:498.67495, y:498.67495 },{x:183.48639, y:183.48639 },{x:192.46517, y:192.46517 },{x:599.33519, y:599.33519 },{x:620.602, y:620.602 },{x:508.18157, y:508.18157 }
    ],
    [
        {x:596.63213, y:596.63213 },{x:496.81276, y:496.81276 },{x:410.10618, y:410.10618 },{x:303.11925, y:303.11925 },{x:358.86176, y:358.86176 },{x:301.59588, y:301.59588 },{x:311.31889, y:311.31889 },{x:299.72737, y:299.72737 },{x:155.94583, y:155.94583 },{x:253.44294, y:253.44294 },{x:411.2685, y:411.2685 },{x:184.17618, y:184.17618 },{x:510.67446, y:510.67446 },{x:547.38157, y:547.38157 },{x:610.43216, y:610.43216 },{x:333.33247, y:333.33247 },{x:495.34128, y:495.34128 },{x:487.7815, y:487.7815 },{x:361.5247, y:361.5247 },{x:381.88736, y:381.88736 },{x:237.29279, y:237.29279 },{x:608.78123, y:608.78123 },{x:329.17958, y:329.17958 },{x:338.10376, y:338.10376 },{x:627.67162, y:627.67162 },{x:211.48187, y:211.48187 },{x:191.79145, y:191.79145 },{x:511.31515, y:511.31515 },{x:514.74124, y:514.74124 },{x:524.71092, y:524.71092 },{x:166.05669, y:166.05669 },{x:620.25024, y:620.25024 },{x:209.50648, y:209.50648 },{x:403.17204, y:403.17204 },{x:157.62727, y:157.62727 },{x:495.12613, y:495.12613 },{x:634.29509, y:634.29509 },{x:431.84208, y:431.84208 },{x:241.04206, y:241.04206 },{x:603.99188, y:603.99188 },{x:409.80316, y:409.80316 },{x:547.54078, y:547.54078 },{x:188.77172, y:188.77172 },{x:429.52475, y:429.52475 },{x:532.44319, y:532.44319 },{x:426.65966, y:426.65966 },{x:564.61308, y:564.61308 },{x:312.82134, y:312.82134 },{x:301.06992, y:301.06992 },{x:173.23167, y:173.23167 },{x:408.17325, y:408.17325 },{x:434.16139, y:434.16139 },{x:405.05426, y:405.05426 },{x:548.43151, y:548.43151 },{x:261.14462, y:261.14462 },{x:436.75789, y:436.75789 },{x:173.9296, y:173.9296 },{x:167.99772, y:167.99772 },{x:466.33631, y:466.33631 },{x:321.45865, y:321.45865 },{x:502.75485, y:502.75485 },{x:189.79648, y:189.79648 },{x:646.46934, y:646.46934 },{x:284.51099, y:284.51099 },{x:393.30143, y:393.30143 },{x:441.94226, y:441.94226 },{x:472.93369, y:472.93369 },{x:411.88731, y:411.88731 },{x:375.6709, y:375.6709 },{x:600.65059, y:600.65059 },{x:198.28471, y:198.28471 },{x:470.97749, y:470.97749 },{x:429.06973, y:429.06973 },{x:625.24555, y:625.24555 },{x:486.05539, y:486.05539 },{x:554.08693, y:554.08693 },{x:348.92241, y:348.92241 },{x:555.85109, y:555.85109 },{x:385.83085, y:385.83085 },{x:528.74492, y:528.74492 },{x:239.24153, y:239.24153 },{x:408.89726, y:408.89726 },{x:193.89329, y:193.89329 },{x:150.43468, y:150.43468 },{x:343.58752, y:343.58752 },{x:460.13673, y:460.13673 },{x:320.57308, y:320.57308 },{x:438.72715, y:438.72715 },{x:265.36565, y:265.36565 },{x:511.31375, y:511.31375 },{x:624.22386, y:624.22386 },{x:455.7107, y:455.7107 },{x:444.31554, y:444.31554 },{x:253.18706, y:253.18706 },{x:544.55159, y:544.55159 },{x:452.66676, y:452.66676 },{x:234.4891, y:234.4891 },{x:373.73189, y:373.73189 },{x:360.23192, y:360.23192 },{x:391.78442, y:391.78442 }
    ]
]

samples = [ ...samples, ...samples.map( sample => [ sample[1], sample[0], ...sample.slice(2) ] ) ]
samples = [ ...samples, ...samples.map( sample => sample.slice().reverse() ) ]

const success = samples
    .every( (points, i) => consistency( delaunay( points ), points ) || console.log( i ) )

assert( success , 'trig' )
