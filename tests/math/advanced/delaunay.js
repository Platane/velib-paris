import {delaunay, computeCircle}  from '../../../front/math/delaunay'
import {assert}  from '../../assert'
import {vec2}  from 'gl-matrix'

const consistency = (triangles, points) =>

    !triangles.some( triangle => {

        const {X,r} = computeCircle( triangle )

        return points
            .filter( (_, i) => !triangle.some( x => x == i) )
            .filter( p => vec2.sqrDist( p, X ) <= r )
            .length
    })




let samples = [
    [

        [0, 10],
        [0, 0],
        [10, 20],
    ],
    [
        [0, 10],
        [0, 20],
        [0, 30],
    ],
    [
        [0, 10],
        [0, 20],
        [0, 30],
        [0, 40],
        [0, 55],
        [10, 55],
    ],
    [
        [80, 20],
        [40, 10],
        [0, 10],
        [40, 20],
        [0, 30],
        [20, 5],
        [0, 20],
        [40, 30],
        [40, 10],
    ],
    [

        [170.42721, 170.42721 ],
        [550.83458, 550.83458 ],
        [210.41682, 210.41682 ],
        [226.02468, 226.02468 ],
        [319.87534, 319.87534 ],
        [400.07436, 400.07436 ],
        [313.28082, 313.28082 ],
        [592.02553, 592.02553 ],
        [440.30833, 440.30833 ],
        [384.60614, 384.60614 ],
        [447.12789, 447.12789 ],
        [311.59793, 311.59793 ],
        [620.48742, 620.48742 ],
        [551.64086, 551.64086 ],
        [498.67495, 498.67495 ],
        [183.48639, 183.48639 ],
        [192.46517, 192.46517 ],
        [599.33519, 599.33519 ],
        [620.602, 620.602 ],
        [508.18157, 508.18157]
    ],
    [

        [596.63213, 596.63213 ],
        [496.81276, 496.81276 ],
        [410.10618, 410.10618 ],
        [303.11925, 303.11925 ],
        [358.86176, 358.86176 ],
        [301.59588, 301.59588 ],
        [311.31889, 311.31889 ],
        [299.72737, 299.72737 ],
        [155.94583, 155.94583 ],
        [253.44294, 253.44294 ],
        [411.2685, 411.2685 ],
        [184.17618, 184.17618 ],
        [510.67446, 510.67446 ],
        [547.38157, 547.38157 ],
        [610.43216, 610.43216 ],
        [333.33247, 333.33247 ],
        [495.34128, 495.34128 ],
        [487.7815, 487.7815 ],
        [361.5247, 361.5247 ],
        [381.88736, 381.88736 ],
        [237.29279, 237.29279 ],
        [608.78123, 608.78123 ],
        [329.17958, 329.17958 ],
        [338.10376, 338.10376 ],
        [627.67162, 627.67162 ],
        [211.48187, 211.48187 ],
        [191.79145, 191.79145 ],
        [511.31515, 511.31515 ],
        [514.74124, 514.74124 ],
        [524.71092, 524.71092 ],
        [166.05669, 166.05669 ],
        [620.25024, 620.25024 ],
        [209.50648, 209.50648 ],
        [403.17204, 403.17204 ],
        [157.62727, 157.62727 ],
        [495.12613, 495.12613 ],
        [634.29509, 634.29509 ],
        [431.84208, 431.84208 ],
        [241.04206, 241.04206 ],
        [603.99188, 603.99188 ],
        [409.80316, 409.80316 ],
        [547.54078, 547.54078 ],
        [188.77172, 188.77172 ],
        [429.52475, 429.52475 ],
        [532.44319, 532.44319 ],
        [426.65966, 426.65966 ],
        [564.61308, 564.61308 ],
        [312.82134, 312.82134 ],
        [301.06992, 301.06992 ],
        [173.23167, 173.23167 ],
        [408.17325, 408.17325 ],
        [434.16139, 434.16139 ],
        [405.05426, 405.05426 ],
        [548.43151, 548.43151 ],
        [261.14462, 261.14462 ],
        [436.75789, 436.75789 ],
        [173.9296, 173.9296 ],
        [167.99772, 167.99772 ],
        [466.33631, 466.33631 ],
        [321.45865, 321.45865 ],
        [502.75485, 502.75485 ],
        [189.79648, 189.79648 ],
        [646.46934, 646.46934 ],
        [284.51099, 284.51099 ],
        [393.30143, 393.30143 ],
        [441.94226, 441.94226 ],
        [472.93369, 472.93369 ],
        [411.88731, 411.88731 ],
        [375.6709, 375.6709 ],
        [600.65059, 600.65059 ],
        [198.28471, 198.28471 ],
        [470.97749, 470.97749 ],
        [429.06973, 429.06973 ],
        [625.24555, 625.24555 ],
        [486.05539, 486.05539 ],
        [554.08693, 554.08693 ],
        [348.92241, 348.92241 ],
        [555.85109, 555.85109 ],
        [385.83085, 385.83085 ],
        [528.74492, 528.74492 ],
        [239.24153, 239.24153 ],
        [408.89726, 408.89726 ],
        [193.89329, 193.89329 ],
        [150.43468, 150.43468 ],
        [343.58752, 343.58752 ],
        [460.13673, 460.13673 ],
        [320.57308, 320.57308 ],
        [438.72715, 438.72715 ],
        [265.36565, 265.36565 ],
        [511.31375, 511.31375 ],
        [624.22386, 624.22386 ],
        [455.7107, 455.7107 ],
        [444.31554, 444.31554 ],
        [253.18706, 253.18706 ],
        [544.55159, 544.55159 ],
        [452.66676, 452.66676 ],
        [234.4891, 234.4891 ],
        [373.73189, 373.73189 ],
        [360.23192, 360.23192 ],
        [391.78442, 391.78442]
    ]
]

samples = [ ...samples, ...samples.map( sample => [ sample[1], sample[0], ...sample.slice(2) ] ) ]
samples = [ ...samples, ...samples.map( sample => sample.slice().reverse() ) ]

const success = samples
    .map( points => delaunay( points ) )
    .every( triangles => consistency( triangles ) )

assert( success , 'trig' )
