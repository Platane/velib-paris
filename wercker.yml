
box: node:6.11

build:

    steps:

        - script:
            cwd: back
            name: install dependencies
            code: |
                npm install -g yarn
                export YARN_CACHE=$WERCKER_CACHE_DIR/yarn
                HOME=$YARN_CACHE yarn --pure-lockfile

        - script:
            cwd: back
            name: build back
            code: env NODE_ENV=ASYNC_POLYFILL yarn run build

        - script:
            cwd: back
            name: test back
            code: env NODE_ENV=ASYNC_POLYFILL yarn run test

        - script:
            cwd: back
            name: install production node_modules
            code: |
                rm -r node_modules
                HOME=$YARN_CACHE yarn --pure-lockfile --production=true

        - script:
            cwd: back
            name: prepare bundle
            code: |
                mkdir -p dist
                mkdir dist/fetchStationAvailability
                cp -r lib/* dist/fetchStationAvailability/
                cp -r node_modules dist/fetchStationAvailability/node_modules
                cp package.json dist/fetchStationAvailability/package.json
                echo "exports.run = function(_,res){var err;require('./module/fetchStationAvailability').run().catch(function(x){err=x}).then(function(){res.send(err?err.toString():'ok')})}" >> dist/fetchStationAvailability/index.js

                mkdir dist/publishBatch
                cp -r lib/* dist/publishBatch/
                cp -r node_modules dist/publishBatch/node_modules
                cp package.json dist/publishBatch/package.json
                echo "exports.run = function(_,callback){var err;require('./module/publishBatch').run({date:Date.now()-1000*60*60}).catch(function(x){err=x}).then(function(){callback(err)})}" >> dist/publishBatch/index.js

                mkdir dist/fetchStations
                cp -r lib/* dist/fetchStations/
                cp -r node_modules dist/fetchStations/node_modules
                cp package.json dist/fetchStations/package.json
                echo "exports.run = function(_,res){var err;require('./module/fetchStations').run().catch(function(x){err=x}).then(function(){res.send(err?err.toString():'ok')})}" >> dist/fetchStations/index.js

        - script:
            name: prepare env
            code: |
                node -e "console.log(JSON.parse(process.env.GC_JSON_KEY_FILE).client_email)" > ./account
                node -e "console.log(JSON.parse(process.env.GC_JSON_KEY_FILE).project_id)" > ./project


deploy-back:

    box:
        id: google/cloud-sdk

    steps:

        - script:
            name: Activate service account
            code: |
                echo $GC_JSON_KEY_FILE >> secret.json
                CLOUDSDK_PYTHON_SITEPACKAGES=1 gcloud auth activate-service-account $( cat account ) --key-file secret.json --project $( cat project )

        - script:
            name: create bucket
            code: gsutil mb -c STANDARD -l EUROPE-WEST1 -p $( cat project ) gs://platane-velib-lambda-function || echo 1

        - script:
            name: deploy function fetchStationAvailability
            code: |
                gcloud beta functions deploy fetchStationAvailability --local-path back/dist/fetchStationAvailability --memory=128MB --timeout 120s --entry-point run --stage-bucket platane-velib-lambda-function --trigger-http
                gcloud beta functions describe fetchStationAvailability

        - script:
            name: deploy function publishBatch
            code: |
                gcloud beta functions deploy publishBatch --local-path back/dist/publishBatch --memory=2GB --timeout 540s --entry-point run --stage-bucket platane-velib-lambda-function --trigger-topic cron-every-day-midnight
                gcloud beta functions describe publishBatch

        - script:
            name: deploy function fetchStations
            code: |
                gcloud beta functions deploy fetchStations --local-path back/dist/fetchStations --memory=128MB --timeout 120s --entry-point run --stage-bucket platane-velib-lambda-function --trigger-http
                gcloud beta functions describe fetchStations
